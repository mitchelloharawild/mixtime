---
format: gfm
---

<!-- README.md is generated from README.qmd. Please edit that file -->

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.path = "man/figures/README-",
  out.width = "100%"
)
```

# mixtime <a href="https://pkg.mitchelloharawild.com/mixtime/"><img src="man/figures/logo.svg" align="right" height="139" alt="mixtime website" /></a>

<!-- badges: start -->
[![Lifecycle: experimental](https://img.shields.io/badge/lifecycle-experimental-orange.svg)](https://www.tidyverse.org/lifecycle/#experimental)
[![R-CMD-check](https://github.com/mitchelloharawild/mixtime/actions/workflows/R-CMD-check.yaml/badge.svg)](https://github.com/mitchelloharawild/mixtime/actions/workflows/R-CMD-check.yaml)
<!-- badges: end -->

mixtime provides flexible time classes for representing mixed temporal granularities
and custom calendar structures.

The feature wishlist for this package includes:

* Multiple temporal granularities (sub-daily, daily, weekly, monthly, quarterly, etc.)
* Optional and custom temporal origins
* Custom calendar structures (working days/hours, holiday effects, trading days)
* Mixed temporal classes (daily and weekly granularities in same vector)

Stretch goals for the package include:

* Representing temporal nesting (2020-01-05 is nested by 2020-01 is nested by 2020)
* `time_join()` operation which respects temporal nesting

## Installation

<!-- You can install the released version of mixtime from [CRAN](https://CRAN.R-project.org) with: -->

<!-- ``` r -->
<!-- install.packages("mixtime") -->
<!-- ``` -->

The development version can be installed from [GitHub](https://github.com/) with:

``` r
# install.packages("remotes")
remotes::install_github("mitchelloharawild/mixtime")
```
## Example

Creating mixtimes.

```{r demo}
library(mixtime)
yearmonth(0:11) # By default, time classes have an origin
yearmonth(0:11) - yearmonth(0) # However some operations can produce mixtimes without origins

yearquarter(0:3)
yearquarter(0:3) - yearquarter(0)

# Different temporal granularities can be combined:
c(yearquarter(0:3), yearmonth(0:11))
```

Integration with tsibble.

```{r tsibble}
tsibble::tsibble(time = yearmonth(0:5), index = time)
tsibble::tsibble(time = c(year(2010:2013), yearquarter(0:3), yearmonth(0:5), as.Date("2010-03-05") + 0:4), index = time)
```

<!-- Change granularities by updating the calendar. -->

<!-- ```{r granularity} -->
<!-- x <- yearmonth(0:11) -->
<!-- tsibble::tsibble( -->
<!--   yearmonth = x, -->
<!--   yearquarter = set_time_units(x, tu_quarter(1)), -->
<!--   year = set_time_units(x, tu_year(1)), -->
<!--   index = yearmonth -->
<!-- ) -->
<!-- ``` -->
